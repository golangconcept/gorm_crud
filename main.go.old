package main

import (
	"fmt"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// User represents a user in the system
type User struct {
	ID        uint   `gorm:"primaryKey"`
	FirstName string `gorm:"size:100"`
	LastName  string `gorm:"size:100"`
	Email     string `gorm:"uniqueIndex"`
	Age       int
	RollNo    int `gorm: "unique"`
}

func main() {
	// Initialize a connection to the SQLite database
	db, err := gorm.Open(sqlite.Open("gorm.db"), &gorm.Config{})
	if err != nil {
		fmt.Println("Error connecting to the database:", err)
		return
	}
	fmt.Println("Successfully connected to the database")

	// Automatically migrate the schema (create the table if it doesn't exist)
	db.AutoMigrate(&User{})

	// Create a new user
	user := User{FirstName: "John", LastName: "Doe", Email: "john.doe@example.com", Age: 30}
	db.Create(&user)
	fmt.Printf("User created with ID: %d\n", user.ID)

	// Read a user by email
	var fetchedUser User
	db.Where("email = ?", "john.doe@example.com").First(&fetchedUser)
	fmt.Printf("User fetched: %s %s, Age: %d\n", fetchedUser.FirstName, fetchedUser.LastName, fetchedUser.Age)

	// Update the user's age
	fetchedUser.Age = 31
	db.Save(&fetchedUser)
	fmt.Printf("User updated: %s %s, Age: %d\n", fetchedUser.FirstName, fetchedUser.LastName, fetchedUser.Age)

	// Delete the user
	// db.Delete(&fetchedUser)
	// fmt.Println("User deleted")
}
